{"version":3,"sources":["webpack://ColumnResizer/webpack/universalModuleDefinition","webpack://ColumnResizer/./src/ColumnResizer.js","webpack://ColumnResizer/./node_modules/string-hash/index.js","webpack://ColumnResizer/webpack/bootstrap","webpack://ColumnResizer/webpack/startup","webpack://ColumnResizer/webpack/runtime/compat get default export","webpack://ColumnResizer/webpack/runtime/define property getters","webpack://ColumnResizer/webpack/runtime/hasOwnProperty shorthand","webpack://ColumnResizer/webpack/runtime/make namespace object"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","count","counter","ColumnResizer","tb","options","navigator","userAgent","indexOf","init","t","classList","remove","RESIZABLE","opt","fixed","tableWidth","Number","window","getComputedStyle","width","replace","valueOf","mw","i","columnCnt","columns","w","style","Math","round","locked","applyBounds","resizeMode","serialize","serializeStore","add","syncGrips","e","o","target","parentNode","data","g","grips","oe","touches","ox","pageX","l","offsetLeft","x","createStyle","document","querySelector","dragCursor","addEventListener","onGripDrag","onGripDragOver","draggingClass","grip","c","preventDefault","minWidth","cellSpace","borderSpace","last","min","max","Infinity","left","PX","liveDrag","overflow","syncCols","cb","onDrag","removeEventListener","lastChild","removeChild","onResize","disable","destroy","id","getAttribute","ID","matches","extended","partialRefresh","head","hoverCursor","css","setAttribute","oldOptions","extendOptions","headers","getTableHeaders","extendTable","remoteTable","remoteHeaders","length","extendRemoteTable","console","warn","map","col","FLEX","forEach","store","m","toString","gripContainer","cRect","getBoundingClientRect","tRect","offsetWidth","height","headerOnly","offsetHeight","tt","remote","element","hash","stringHash","oldStyle","querySelectorAll","Array","from","filter","gripid","createElement","type","styleSheet","cssText","appendChild","createTextNode","extOptions","Object","assign","DEFAULTS","table","th","concat","filterInvisible","nodes","column","node","display","removePadding","insertAdjacentHTML","previousElementSibling","marginLeft","marginRight","parseInt","legacyIE","cellSpacing","currentStyle","borderSpacing","split","border","borderLeftWidth","createGrips","controller","header","index","removeAttribute","push","cg","columnGrp","storage","deserializeStore","widths","dc","disabledColumns","createDiv","handle","gripInnerHtml","innerHTML","onGripMouseDown","capture","passive","ot","flush","tw","className","text","div","isOver","inc","c0","c1","w0","w1","sw0","sw1","sessionStorage","Element","prototype","msMatchesSelector","str","charCodeAt","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","key","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","value"],"mappings":"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","file":"column-resizer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ColumnResizer\"] = factory();\n\telse\n\t\troot[\"ColumnResizer\"] = factory();\n})(this, function() {\nreturn ","/**\n * Created by jjglyn on 12/19/16.\n */\nimport stringHash from 'string-hash';\n\nconst counter = (() => {\n    let count = 0;\n    return () => {\n        return count++;\n    };\n})();\n\nexport default class ColumnResizer {\n    ID = 'id';\n    PX = 'px';\n    RESIZABLE = 'grip-resizable';\n    FLEX = 'grip-flex';\n    legacyIE = navigator.userAgent.indexOf('Trident/4.0') > 0;\n\n    /**\n     *\n     * @param {HTMLTableElement} tb\n     * @param {Object} options\n     */\n    constructor(tb, options = {}) {\n        try {\n            this.store = sessionStorage;\n        } catch (e) {\n            this.store = {};\n        }\n        this.grip = null;\n        this.tb = tb;\n        window.addEventListener('resize', this.onResize);\n        // Polyfill for IE\n        if (!Element.prototype.matches) {\n            Element.prototype.matches = Element.prototype.msMatchesSelector;\n        }\n        this.init(options);\n    }\n\n    /**\n     * Reinitialize the object with options.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    reset = options => {\n        return this.init(options);\n    };\n\n    /**\n     * Remove column resizing properties from the table then re-apply them\n     */\n    onResize = () => {\n        const t = this.tb;\n        t.classList.remove(this.RESIZABLE);\n        if (t.opt.fixed) {\n            t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n            let mw = 0;\n            for (let i = 0; i < t.columnCnt; i++) {\n                mw += t.columns[i].w;\n            }\n            for (let i = 0; i < t.columnCnt; i++) {\n                t.columns[i].style.width = Math.round(1000 * t.columns[i].w / mw) / 10 + '%';\n                t.columns[i].locked = true;\n            }\n        } else {\n            this.applyBounds();\n            if (t.opt.resizeMode === 'flex' && t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        t.classList.add(this.RESIZABLE);\n        this.syncGrips();\n    };\n\n    /**\n     * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events\n     * and store some values used while dragging.\n     * @param {UIEvent} e - grip's mousedown/touchstart event\n     */\n    onGripMouseDown = (e) => {\n        const o = e.target.parentNode.data;\n        const t = this.tb;\n        const g = t.grips[o.i];\n        const oe = e.touches;\n        g.ox = oe ? oe[0].pageX : e.pageX;\n        g.l = g.offsetLeft;\n        g.x = g.l;\n\n        this.createStyle(document.querySelector('head'), '*{cursor:' + t.opt.dragCursor + '!important}');\n        document.addEventListener('touchmove', this.onGripDrag);\n        document.addEventListener('mousemove', this.onGripDrag);\n        document.addEventListener('touchend', this.onGripDragOver);\n        document.addEventListener('mouseup', this.onGripDragOver);\n        g.classList.add(t.opt.draggingClass); \t//add the dragging class (to allow some visual feedback)\n        this.grip = g;\n        if (t.columns[o.i].locked) { \t//if the column is locked (after browser resize), then c.w must be updated\n            for (let i = 0, c; i < t.columnCnt; i++) {\n                c = t.columns[i];\n                c.locked = false;\n                c.w = Number(window.getComputedStyle(c).width.replace(/px/, '')).valueOf();\n            }\n        }\n        e.preventDefault(); //prevent text selection\n    };\n\n    /**\n     * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it.\n     * @param {UIEvent} e - mousemove/touchmove event bound to the window object\n     */\n    onGripDrag = (e) => {\n        const grip = this.grip;\n        if (!grip) {\n            return;\n        }\n        const t = grip.t;\n        const oe = e.touches;\n        const ox = oe ? oe[0].pageX : e.pageX;\n        let x = ox - grip.ox + grip.l;\n        const mw = t.opt.minWidth;\n        const i = grip.i;\n        const l = t.cellSpace * 1.5 + mw + t.borderSpace;\n        const last = i === t.columnCnt - 1;\n        const min = i ? t.grips[i - 1].offsetLeft + t.cellSpace + mw : l;\n        const max = t.opt.fixed ? i === t.columnCnt - 1 ? t.tableWidth - l : t.grips[i + 1].offsetLeft - t.cellSpace - mw : Infinity;\n        x = Math.max(min, Math.min(max, x));\n        grip.x = x;\n        grip.style.left = x + this.PX;\n        if (last) {\n            grip.w = t.columns[i].w + x - grip.l;\n        }\n        if (t.opt.liveDrag) {\n            if (last) {\n                t.columns[i].style.width = grip.w + this.PX;\n                if (!t.opt.fixed && t.opt.overflow) {\n                    t.style.minWidth = (t.tableWidth + x - grip.l) + this.PX;\n                } else {\n                    t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n                }\n            } else {\n                this.syncCols(t, i, false, t.opt);\n            }\n            this.syncGrips();\n            const cb = t.opt.onDrag;\n            if (cb) {\n                cb(e);\n            }\n        }\n        e.preventDefault(); //prevent text selection while dragging\n    };\n\n    /**\n     * Event handler fired when the dragging is over, updating table layout\n     * @param {UIEvent} e - grip's drag over event\n     */\n    onGripDragOver = (e) => {\n        const grip = this.grip;\n        document.removeEventListener('touchend', this.onGripDragOver);\n        document.removeEventListener('mouseup', this.onGripDragOver);\n        document.removeEventListener('touchmove', this.onGripDrag);\n        document.removeEventListener('mousemove', this.onGripDrag);\n        const last = document.querySelector('head').lastChild;\n        last.parentNode.removeChild(last);\n        if (!grip) {\n            return;\n        }\n        grip.classList.remove(grip.t.opt.draggingClass);\n        if (!(grip.x - grip.l === 0)) {\n            const t = grip.t;\n            const cb = t.opt.onResize;\n            const i = grip.i;\n            const last = i === t.columnCnt - 1;\n            if (last) {\n                const c = t.columns[i];\n                c.style.width = grip.w + this.PX;\n                c.w = grip.w;\n            } else {\n                this.syncCols(t, i, true, t.opt);\n            }\n            if (!t.opt.fixed) {\n                this.applyBounds();\n            }\n            this.syncGrips();\n            if (cb) {\n                cb(e);\n            }\n            if (t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        this.grip = null;\n    };\n\n    /**\n     * Prepares the table set in the constructor for resizing.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    init = (options) => {\n        if (options.disable) {\n            return this.destroy();\n        }\n        const tb = this.tb;\n        const id = tb.getAttribute(this.ID) || this.RESIZABLE + counter();\n        if (!tb.matches('table') || tb.extended && !options.partialRefresh) {\n            return null;\n        }\n        //append required CSS rules\n        const head = document.querySelector('head');\n        const css = ' .grip-resizable{table-layout:fixed;} .grip-resizable > tbody > tr > td, .grip-resizable > tbody > tr > th{overflow:hidden}'\n            + ' .grip-padding > tbody > tr > td, .grip-padding > tbody > tr > th{padding-left:0!important; padding-right:0!important;}'\n            + ' .grip-container{ height:0px; position:relative;} .grip-handle{margin-left:-5px; position:absolute; z-index:5; }'\n            + ' .grip-handle .grip-resizable{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: col-resize;top:0px}'\n            + ' .grip-lastgrip{position:absolute; width:1px; } .grip-drag{ border-left:1px dotted black;\t}'\n            + ' .grip-flex{width:auto!important;} .grip-handle.grip-disabledgrip .grip-resizable{cursor:default; display:none;}';\n        this.createStyle(head, css);\n        if (options.hoverCursor && options.hoverCursor !== 'col-resize') {\n            const css = '.grip-handle .grip-resizable:hover{cursor:' + options.hoverCursor + '!important}';\n            this.createStyle(head, css);\n        }\n        tb.setAttribute(this.ID, id);\n        const oldOptions = tb.opt;\n        tb.opt = this.extendOptions(options);\n        const headers = this.getTableHeaders(tb);\n        this.extendTable(headers);\n        if (options.remoteTable && options.remoteTable.matches('table')) {\n            const remoteHeaders = this.getTableHeaders(tb.opt.remoteTable);\n            if (headers.length === remoteHeaders.length) {\n                this.extendRemoteTable(tb.opt.remoteTable, remoteHeaders, tb);\n            } else {\n                console.warn('column count for remote table did not match');\n            }\n        }\n        return oldOptions;\n    };\n\n    /**\n     * This function updates all columns width according to its real width. It must be taken into account that the\n     * sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind\n     * of max-width).\n     */\n    applyBounds = () => {\n        const t = this.tb;\n        const w = t.columns.map(col => {\n            return window.getComputedStyle(col).width;\n        });\n        t.style.width = window.getComputedStyle(t).width;\n        t.tableWidth = Number(t.style.width.replace(/px/, '')).valueOf();\n        //prevent table width changes\n        t.classList.remove(this.FLEX);\n        t.columns.forEach((col, i) => {\n            col.style.width = w[i];\n            col.w = Number(w[i].replace(/px/, '')).valueOf();\n        });\n        //allow table width changes\n        t.classList.add(this.FLEX);\n    };\n\n    /**\n     * Writes the current column widths to storage.\n     */\n    serializeStore = () => {\n        const store = this.store;\n        const t = this.tb;\n        store[t.getAttribute(this.ID)] = '';\n        let m = 0;\n        for (let i = 0; i < t.columns.length; i++) {\n            const w = window.getComputedStyle(t.columns[i]).width.replace(/px/, '');\n            store[t.getAttribute(this.ID)] += w + ';';\n            m += Number(w).valueOf();\n        }\n        //the last item of the serialized string is the table's active area (width)\n        store[t.getAttribute(this.ID)] += m.toString();\n        if (!t.opt.fixed) {\n            store[t.getAttribute(this.ID)] += ';' + window.getComputedStyle(t).width.replace(/px/, '');\n        }\n    };\n\n    /**\n     * Function that places each grip in the correct position according to the current table layout\n     */\n    syncGrips = () => {\n        const t = this.tb;\n        t.gripContainer.style.width = t.tableWidth + this.PX;\n        for (let i = 0; i < t.columnCnt; i++) {\n            const c = t.columns[i];\n            const cRect = c.getBoundingClientRect();\n            const tRect = t.getBoundingClientRect();\n            t.grips[i].style.left = cRect.left - tRect.left + c.offsetWidth + t.cellSpace / 2 + this.PX;\n            t.grips[i].style.height = (t.opt.headerOnly ? t.columns[0].offsetHeight : t.offsetHeight) + this.PX;\n        }\n    };\n\n    /**\n     * This function removes any enhancements from the table being processed.\n     * @returns {Object} current option object if any\n     */\n    destroy = () => {\n        const tt = this.tb;\n        const id = tt.getAttribute(this.ID);\n        if (!id) {\n            return null;\n        }\n        this.store[id] = '';\n        tt.classList.remove(this.RESIZABLE);\n        tt.classList.remove(this.FLEX);\n        if (tt.remote) {\n            tt.remote.classList.remove(this.RESIZABLE);\n            tt.remote.classList.remove(this.FLEX);\n        }\n        if (tt.gripContainer && tt.gripContainer.parentNode) {\n            tt.gripContainer.parentNode.removeChild(tt.gripContainer);\n        }\n        delete tt.extended;\n        return tt.opt;\n    };\n\n    /**\n     * Utility method to add a <style> to an element\n     * @param {HTMLElement} element\n     * @param {string} css\n     */\n    createStyle = (element, css) => {\n        const hash = stringHash(css).toString();\n        const oldStyle = element.querySelectorAll('style');\n        const filtered = Array.from(oldStyle).filter(style => {\n            return (style.gripid === hash);\n        });\n        if (filtered.length) {\n            return;\n        }\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        style.gripid = hash;\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n        element.appendChild(style);\n    };\n\n    /**\n     * Populates unset options with defaults and sets resizeMode properties.\n     * @param {Object} options\n     * @returns {Object}\n     */\n    extendOptions = (options) => {\n        const extOptions = Object.assign({}, ColumnResizer.DEFAULTS, options);\n        extOptions.fixed = true;\n        extOptions.overflow = false;\n        switch (extOptions.resizeMode) {\n            case 'flex':\n                extOptions.fixed = false;\n                break;\n            case 'overflow':\n                extOptions.fixed = false;\n                extOptions.overflow = true;\n                break;\n        }\n        return extOptions;\n    };\n\n    /**\n     * Finds all the visible table header elements from a given table.\n     * @param {HTMLTableElement} table\n     * @returns {HTMLElement[]}\n     */\n    getTableHeaders = (table) => {\n        const id = '#' + table.id;\n        let th = Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>th'));\n        th = th.concat(Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>td')));\n        if (!th.length) {\n            th = Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>th'));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>th')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>td')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>td')));\n        }\n        return this.filterInvisible(th, false);\n    };\n\n    /**\n     * Filter invisible columns.\n     * @param {HTMLElement[]} nodes\n     * @param {boolean} column\n     * @return {HTMLElement[]}\n     */\n    filterInvisible = (nodes, column) => {\n        return nodes.filter((node) => {\n            const width = column ? -1 : node.offsetWidth;\n            const height = column ? -1 : node.offsetHeight;\n            const invisible = (width === 0 && height === 0)\n                || (node.style && node.style.display && window.getComputedStyle(node).display === 'none') || false;\n            return !invisible;\n        });\n    };\n\n    /**\n     * Add properties to the table for resizing\n     * @param {HTMLTableElement} th\n     */\n    extendTable = (th) => {\n        const tb = this.tb;\n        if (tb.opt.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        tb.insertAdjacentHTML('beforebegin', '<div class=\"grip-container\"/>');\t//class forces table rendering in fixed-layout mode to prevent column's min-width\n        tb.grips = []; // grips\n        tb.columns = []; // columns\n        tb.tableWidth = Number(window.getComputedStyle(tb).width.replace(/px/, '')).valueOf();\n        tb.gripContainer = tb.previousElementSibling;\n        if (tb.opt.marginLeft) {\n            tb.gripContainer.style.marginLeft = tb.opt.marginLeft;\n        }\n        if (tb.opt.marginRight) {\n            tb.gripContainer.style.marginRight = tb.opt.marginRight;\n        }\n        tb.cellSpace = parseInt(this.legacyIE ? tb.cellSpacing || tb.currentStyle.borderSpacing : window.getComputedStyle(tb).borderSpacing.split(' ')[0].replace(/px/, '')) || 2;\n        tb.borderSpace = parseInt(this.legacyIE ? tb.border || tb.currentStyle.borderLeftWidth : window.getComputedStyle(tb).borderLeftWidth.replace(/px/, '')) || 1;\n        tb.extended = true;\n        this.createGrips(th);\n    };\n\n    /**\n     * Add properties to the remote table for resizing\n     * @param {HTMLTableElement} tb - the remote table\n     * @param {HTMLElement[]} th - table header array\n     * @param {HTMLTableElement} controller - the controlling table\n     */\n    extendRemoteTable = (tb, th, controller) => {\n        const options = controller.opt;\n        if (options.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        if (!tb.getAttribute(this.ID)) {\n            tb.setAttribute(this.ID, controller.getAttribute(this.ID) + 'remote');\n        }\n        tb.columns = []; // columns\n        th.forEach((header, index) => {\n            const column = th[index];\n            column.w = controller.columns[index].w;\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            tb.columns.push(column);\n        });\n        tb.tableWidth = controller.tableWidth;\n        tb.cellSpace = controller.cellSpace;\n        tb.borderSpace = controller.borderSpace;\n        const cg = Array.from(tb.querySelectorAll('col'));\n        tb.columnGrp = this.filterInvisible(cg, true);\n        tb.columnGrp.forEach( (col, index) => {\n            col.removeAttribute('width');\n            col.style.width = controller.columnGrp[index].style.width;\n        });\n        controller.remote = tb;\n    };\n\n    /**\n     * Function to create all the grips associated with the table given by parameters\n     * @param {HTMLElement[]} th - table header array\n     */\n    createGrips = (th) => {\n        const t = this.tb;\n        t.columnGrp = this.filterInvisible(Array.from(t.querySelectorAll('col')), true);\n        t.columnGrp.forEach(col => {\n            col.removeAttribute('width');\n        });\n        t.columnCnt = th.length;\n        let storage = false;\n        if (this.store[t.getAttribute(this.ID)]) {\n            this.deserializeStore(th);\n            storage = true;\n        }\n        if (!t.opt.widths) {\n            t.opt.widths = [];\n        }\n        th.forEach((header, index) => {\n            const column = th[index];\n            const dc = t.opt.disabledColumns.indexOf(index) !== -1;\n            this.createDiv(t.gripContainer, 'grip-handle');\n            const handle = t.gripContainer.lastChild;\n            if (!dc && t.opt.gripInnerHtml) { //add the visual node to be used as grip\n                handle.innerHTML = t.opt.gripInnerHtml;\n            }\n            this.createDiv(handle, this.RESIZABLE);\n            if (index === t.columnCnt - 1) {\n                handle.classList.add('grip-lastgrip');\n                if (t.opt.fixed) {\n                    // if the table resizing mode is set to fixed, the last grip is removed since table\n                    // width can not change\n                    handle.innerHTML = '';\n                }\n            }\n            handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n            handle.addEventListener('mousedown', this.onGripMouseDown, true);\n\n            if (!dc) {\n                handle.classList.remove('grip-disabledgrip');\n                handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n                handle.addEventListener('mousedown', this.onGripMouseDown, true);\n            } else {\n                handle.classList.add('grip-disabledgrip');\n            }\n\n            handle.t = t;\n            handle.i = index;\n            if (t.opt.widths[index]) {\n                column.w = t.opt.widths[index];\n            } else if (storage) {\n                column.w = Number(column.style.width.replace(/px/, '')).valueOf();\n            } else {\n                column.w = Number(window.getComputedStyle(column).width.replace(/px/, '')).valueOf();\n            }\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            handle.data = {i: index, t: t.getAttribute(this.ID), last: index === t.columnCnt - 1};\n            t.grips.push(handle);\n            t.columns.push(column);\n        });\n        let ot = Array.from(t.querySelectorAll('td'));\n        ot.concat(Array.from(t.querySelectorAll('th')));\n        //the width attribute is removed from all table cells which are not nested in other tables and don't belong to the header array\n        ot = ot.filter((node) => {\n            // .not(th)\n            for (let i = 0; i < th.length; i++) {\n                if (th[i] === node) return false;\n            }\n            return true;\n        });\n        ot = ot.filter((node) => {\n            //.not('table th, table td')\n            return !(node.querySelectorAll('table th').length || node.querySelectorAll('table td').length);\n        });\n        ot.forEach(table => {\n            table.removeAttribute('width');\n        });\n        if (!t.opt.fixed) {\n            t.removeAttribute('width');\n            t.classList.add(this.FLEX);\n        }\n        this.syncGrips();\n    };\n\n    /**\n     * Get the stored table headers.\n     * @param {HTMLElement[]} th - table header array\n     */\n    deserializeStore = (th) => {\n        const t = this.tb;\n        t.columnGrp.forEach((node) => {\n            node.removeAttribute('width');\n        });\n        if (t.opt.flush) {\n            this.store[t.getAttribute(this.ID)] = '';\n            return;\n        }\n        const w = this.store[t.getAttribute(this.ID)].split(';');\n        const tw = w[t.columnCnt + 1];\n        if (!t.opt.fixed && tw) {\n            t.style.width = tw + this.PX;\n            if (t.opt.overflow) {\n                t.style.minWidth = tw + this.PX;\n                t.tableWidth = Number(tw).valueOf();\n            }\n        }\n        for (let i = 0; i < t.columnCnt; i++) {\n            th[i].style.width = w[i] + this.PX;\n            if (t.columnGrp[i]) {\n                // this code is required in order to create an inline CSS rule with higher precedence than\n                // an existing CSS class in the 'col' elements\n                t.columnGrp[i].style.width = 100 * Number(w[i]).valueOf() / Number(w[t.columnCnt]).valueOf() + '%';\n            }\n        }\n    };\n\n    /**\n     * Utility method to wrap HTML text in a <div/> and appent to an element.\n     * @param {HTMLElement} element - the HTML element to append the div to\n     * @param {string} className - class name for the new div for styling\n     * @param {string} text - inner HTML text\n     */\n    createDiv = (element, className, text) => {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        if (text) {\n            div.innerHTML = text;\n        }\n        element.appendChild(div);\n    };\n\n    /**\n     * This function updates column's width according to the horizontal position increment of the grip being\n     * dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver\n     * event handler to synchronize grip's position with their related columns.\n     * @param {HTMLTableElement} t - table object\n     * @param {number} i - index of the grip being dragged\n     * @param {boolean} isOver - to identify when the function is being called from the onGripDragOver event\n     * @param {Object} options - used for chaining options with remote tables\n     */\n    syncCols = (t, i, isOver, options) => {\n        const remote = t.remote;\n        const inc = this.grip.x - this.grip.l;\n        const c0 = t.columns[i];\n        const c1 = t.columns[i + 1];\n        if (!(c0 && c1)) {\n            return;\n        }\n        const w0 = c0.w + inc;\n        const w1 = c1.w - inc;\n        const sw0 = w0 + this.PX;\n        c0.style.width = sw0;\n        if (t.columnGrp[i] && t.columnGrp[i].style.width) {\n            t.columnGrp[i].style.width = sw0;\n        }\n        if (remote) {\n            remote.columns[i].style.width = sw0;\n            if (remote.columnGrp[i] && remote.columnGrp[i].style.width) {\n                remote.columnGrp[i].style.width = sw0;\n            }\n        }\n        if (options.fixed) {\n            const sw1 = w1 + this.PX;\n            c1.style.width = sw1;\n            if (t.columnGrp[i + 1] && t.columnGrp[i + 1].style.width) {\n                t.columnGrp[i + 1].style.width = sw1;\n            }\n            if (remote) {\n                remote.columns[i + 1].style.width = sw1;\n                if (remote.columnGrp[i + 1] && remote.columnGrp[i + 1].style.width) {\n                    remote.columnGrp[i + 1].style.width = sw1;\n                }\n            }\n        } else if (options.overflow) {\n            //if overflow is set, increment min-width to force overflow\n            t.style.minWidth = (t.tableWidth + inc) + this.PX;\n        }\n        if (isOver) {\n            c0.w = w0;\n            c1.w = options.fixed ? w1 : c1.w;\n            if (remote) {\n                remote.columns[i].w = w0;\n                remote.columns[i + 1].w = options.fixed ? w1 : c1.w;\n            }\n        }\n    };\n}\n\nColumnResizer.DEFAULTS = {\n    //attributes:\n    resizeMode: 'fit',              //mode can be 'fit', 'flex' or 'overflow'\n    draggingClass: 'grip-drag',\t    //css-class used when a grip is being dragged (for visual feedback purposes)\n    gripInnerHtml: '',\t\t\t\t//if it is required to use a custom grip it can be done using some custom HTML\n    liveDrag: false,\t\t\t\t//enables table-layout updating while dragging\n    minWidth: 15, \t\t\t\t\t//minimum width value in pixels allowed for a column\n    headerOnly: false,\t\t\t\t//specifies that the size of the the column resizing anchors will be bounded to the size of the first row\n    hoverCursor: 'col-resize',  \t//cursor to be used on grip hover\n    dragCursor: 'col-resize',  \t\t//cursor to be used while dragging\n    flush: false, \t\t\t\t\t//when it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data\n    marginLeft: null,\t\t\t\t//e.g. '10%', '15em', '5px' ...\n    marginRight: null, \t\t\t\t//e.g. '10%', '15em', '5px' ...\n    remoteTable: null,              //other table element to resize using the main table as a controller\n    disable: false,\t\t\t\t\t//disables all the enhancements performed in a previously resized table\n    partialRefresh: false,\t\t\t//can be used when the table is inside of an updatePanel,\n    disabledColumns: [],            //column indexes to be excluded\n    removePadding: true,            //remove padding from the header cells.\n    widths: [],                     //array of initial column widths\n    serialize: true,\n\n    //events:\n    onDrag: null, \t\t\t\t\t//callback function to be fired during the column resizing process if liveDrag is enabled\n    onResize: null\t\t\t\t\t//callback function fired when the dragging process is over\n};\n","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(67);\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}