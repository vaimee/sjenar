{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/progs/vaimee/sjenar/jena-fuseki2/jena-fuseki-ui/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _chai = require(\"chai\");\n\nvar _testUtils = require(\"@vue/test-utils\");\n\nvar _ServerStatus = _interopRequireDefault(require(\"@/components/ServerStatus.vue\"));\n\nvar _server = _interopRequireDefault(require(\"@/model/server.status\"));\n\nvar _sinon = _interopRequireDefault(require(\"sinon\"));\n\nvar _bootstrapVue = _interopRequireDefault(require(\"bootstrap-vue\"));\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n_vue.default.use(_bootstrapVue.default);\n\nconst localVue = (0, _testUtils.createLocalVue)();\nlet count = 0;\nlocalVue.prototype.$fusekiService = {\n  async getServerStatus() {\n    count += 1;\n    return new _server.default(true, `OK ${count}`);\n  }\n\n};\ndescribe('ServerStatus', () => {\n  let fakeClock;\n  let component;\n\n  const mountFunction = options => {\n    return (0, _testUtils.shallowMount)(_ServerStatus.default, {\n      localVue,\n      ...options\n    });\n  };\n\n  beforeEach(async () => {\n    count = 0;\n    fakeClock = _sinon.default.useFakeTimers();\n    component = mountFunction();\n  });\n  afterEach(() => {\n    fakeClock.restore();\n  });\n  it('returns the correct server status', async () => {\n    (0, _chai.expect)(component.vm.serverStatusText).to.equal('OK 1');\n  });\n  it('returns the correct server status in the interval too', async () => {\n    await fakeClock.tickAsync(5000);\n    (0, _chai.expect)(component.vm.serverStatusText).to.equal('OK 2');\n  });\n  it('destroys the interval', async () => {\n    (0, _chai.expect)(component.vm.interval).to.not.equal(null);\n    component.vm.$destroy();\n    (0, _chai.expect)(component.vm.interval).to.equal(null);\n  });\n});","map":null,"metadata":{},"sourceType":"script"}